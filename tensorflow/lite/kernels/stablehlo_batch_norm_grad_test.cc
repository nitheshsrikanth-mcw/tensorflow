#include "tensorflow/lite/interpreter.h"
#include "tensorflow/lite/kernels/kernel_util.h"
#include "tensorflow/lite/kernels/test_util.h"
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/model.h"
#include "gmock/gmock.h"  // Include for ElementsAreArray
#include <iostream>

namespace tflite {
namespace {

using ::testing::ElementsAreArray;

// Assuming that CreateStableHLOBatchNormGradOptions is a function generated by FlatBuffers
// and is available in the code base.

class StableHLOBatchNormGradOpModel : public SingleOpModel {
 public:
  StableHLOBatchNormGradOpModel(const std::vector<int>& input_shape,
                                const std::vector<int>& scale_shape,
                                const std::vector<int>& mean_shape,
                                const std::vector<int>& variance_shape,
                                const std::vector<int>& grad_output_shape,
                                float epsilon, int32_t feature_index)
      : epsilon_(epsilon), feature_index_(feature_index) {
    std::cout << "Initializing StableHLOBatchNormGradOpModel" << std::endl;

    input_ = AddInput(TensorType_FLOAT32);
    scale_ = AddInput(TensorType_FLOAT32);
    mean_ = AddInput(TensorType_FLOAT32);
    variance_ = AddInput(TensorType_FLOAT32);
    grad_output_ = AddInput(TensorType_FLOAT32);

    output_grad_operand_ = AddOutput(TensorType_FLOAT32);
    output_grad_scale_ = AddOutput(TensorType_FLOAT32);
    output_grad_offset_ = AddOutput(TensorType_FLOAT32);

    std::cout << "Inputs and outputs added" << std::endl;

    // Create FlatBufferBuilder
    flatbuffers::FlatBufferBuilder builder;

    // Create options for the custom operation
    auto stablehlo_batch_norm_grad_options = CreateStableHLOBatchNormGradOptions(
        builder, epsilon_, feature_index_);

    std::cout << "Custom operation options created" << std::endl;

    // Set the custom operation
    SetBuiltinOp(
        BuiltinOperator_STABLEHLO_BATCH_NORM_GRAD,
        BuiltinOptions2_StableHLOBatchNormGradOptions,
        stablehlo_batch_norm_grad_options.Union());

    std::cout << "Builtin operation set with custom options" << std::endl;

    // Build the interpreter with input shapes
    BuildInterpreter(
        {input_shape, scale_shape, mean_shape, variance_shape, grad_output_shape});

    std::cout << "Interpreter built with input shapes" << std::endl;

    // Allocate tensors (handled by BuildInterpreter)
  }

  // Getter functions for epsilon and feature_index
  float GetEpsilon() const { return epsilon_; }
  int32_t GetFeatureIndex() const { return feature_index_; }

  // Functions to set inputs
  void SetInput(std::initializer_list<float> data) {
    std::cout << "Setting input tensor" << std::endl;
    PopulateTensor(input_, data);
  }
  void SetScale(std::initializer_list<float> data) {
    std::cout << "Setting scale tensor" << std::endl;
    PopulateTensor(scale_, data);
  }
  void SetMean(std::initializer_list<float> data) {
    std::cout << "Setting mean tensor" << std::endl;
    PopulateTensor(mean_, data);
  }
  void SetVariance(std::initializer_list<float> data) {
    std::cout << "Setting variance tensor" << std::endl;
    PopulateTensor(variance_, data);
  }
  void SetGradOutput(std::initializer_list<float> data) {
    std::cout << "Setting grad_output tensor" << std::endl;
    PopulateTensor(grad_output_, data);
  }

  // Functions to get outputs
  std::vector<float> GetOutputGradOperand() {
    std::cout << "Extracting output_grad_operand tensor" << std::endl;
    return ExtractVector<float>(output_grad_operand_);
  }
  std::vector<float> GetOutputGradScale() {
    std::cout << "Extracting output_grad_scale tensor" << std::endl;
    return ExtractVector<float>(output_grad_scale_);
  }
  std::vector<float> GetOutputGradOffset() {
    std::cout << "Extracting output_grad_offset tensor" << std::endl;
    return ExtractVector<float>(output_grad_offset_);
  }

 protected:
  void VerifyTensorAllocation(int tensor_index) {
    TfLiteTensor* t = interpreter_->tensor(tensor_index);
    if (t->data.raw != nullptr) {
      std::cout << "Debug: Tensor index " << tensor_index << " data.raw is allocated" << std::endl;
    } else {
      std::cout << "Debug: Tensor index " << tensor_index << " data.raw is Not allocated" << std::endl;
    }
    std::cout << "Debug: Tensor index " << tensor_index << " data size is " << t->bytes << " bytes." << std::endl;
  }

  float epsilon_;
  int32_t feature_index_;

  int input_;
  int scale_;
  int mean_;
  int variance_;
  int grad_output_;
  int output_grad_operand_;
  int output_grad_scale_;
  int output_grad_offset_;
};

TEST(StableHLOBatchNormGradOpTest, SimpleTest) {
  std::cout << "Starting StableHLOBatchNormGradOpTest.SimpleTest" << std::endl;

  float epsilon = 1e-5;
  int32_t feature_index = 3;
  StableHLOBatchNormGradOpModel model(
      /*input_shape=*/{1, 2, 2, 3},
      /*scale_shape=*/{3},
      /*mean_shape=*/{3},
      /*variance_shape=*/{3},
      /*grad_output_shape=*/{1, 2, 2, 3},
      /*epsilon=*/epsilon,
      /*feature_index=*/feature_index);

  std::cout << "Model initialized" << std::endl;

  // Verify that the parameters were set correctly
  std::cout << "Verifying parameters" << std::endl;
  EXPECT_EQ(model.GetEpsilon(), epsilon);
  EXPECT_EQ(model.GetFeatureIndex(), feature_index);

  // Set input tensors
  std::cout << "Setting input tensors" << std::endl;
  model.SetInput({1.0f, 2.0f, 3.0f,
                 4.0f, 5.0f, 6.0f,
                 7.0f, 8.0f, 9.0f,
                 10.0f, 11.0f, 12.0f});
  model.SetScale({1.0f, 1.0f, 1.0f});
  model.SetMean({5.5f, 6.5f, 7.5f});
  model.SetVariance({8.25f, 8.25f, 8.25f});
  model.SetGradOutput({0.1f, 0.2f, 0.3f,
                      0.4f, 0.5f, 0.6f,
                      0.7f, 0.8f, 0.9f,
                      1.0f, 1.1f, 1.2f});

  std::cout << "Input tensors set" << std::endl;

  // Invoke the model
  std::cout << "Invoking the model" << std::endl;
  model.Invoke();

  std::cout << "Model invoked" << std::endl;

  // Check outputs
  std::cout << "Checking output tensors" << std::endl;
  EXPECT_THAT(model.GetOutputGradOperand(), ElementsAreArray({
    0.034f, 0.046f, 0.057f,
    0.068f, 0.080f, 0.091f,
    0.102f, 0.114f, 0.125f,
    0.137f, 0.148f, 0.159f
  }));
  EXPECT_THAT(model.GetOutputGradScale(), ElementsAreArray({
    0.6f, 0.7f, 0.8f
  }));
  EXPECT_THAT(model.GetOutputGradOffset(), ElementsAreArray({
    0.6f, 0.7f, 0.8f
  }));

  std::cout << "Output tensors checked" << std::endl;
}

}  // namespace
}  // namespace tflite
